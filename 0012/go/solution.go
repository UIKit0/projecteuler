/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

package main

import "fmt"
import "os"

func num_divisors(n int) int {
	/* It doesn't take long to find the prime factorization of a number */
	/* From that, we can quickly find the number of divisors */
	/* See http://mathschallenge.net/library/number/number_of_divisors */
	a := 0
	for n % 2 == 0 {
		n /= 2
		a += 1
	}
	product := a + 1
	i := 3
	for n != 1 {
		b := 0
		for n % i == 0 {
			n /= i
			b += 1
		}
		product *= (b + 1)
		i += 2
	}
	return product
}

func main() {
	/* All triangular numbers take the form n (n + 1) / 2 */
	/* So only iterate on those ones */
	/* I'll also assume that the number will be divisible by two */
	for i := 2; true; i += 4 {
		if num_divisors(i * (i + 1) / 2) > 500 {
			fmt.Println(i * (i + 1) / 2)
			os.Exit(0)
		}
		if num_divisors((i + 1) * (i + 2) / 2) > 500 {
			fmt.Println((i + 1) * (i + 2) / 2)
			os.Exit(0)
		}
	}
	/* It actually might be faster to build the prime factorization, though */
}
